# This is a complete AWS CloudFormation template for creating a VPC with 2 Availability Zones, an Application Load Balancer, and an Auto Scaling Group with EC2 instances.
# It includes all necessary resources and configurations to deploy a highly available and scalable web application.

# Steps in code:
#VPC Creation:
# Create a custom VPC with a specified CIDR block
# Create an Internet Gateway (IGW) for outbound internet access
# Attach the Internet Gateway to the VPC

#Public Subnets:
# Create a public subnet in Availability Zone 1
# Create a public subnet in Availability Zone 2
# Enable auto-assign public IP addresses for public subnets

#Private Subnets:
# Create a private subnet in Availability Zone 1
# Create a private subnet in Availability Zone 2

#Route Tables for Public Subnets:
# Create a route table for public subnets
# Create a default route in the public route table pointing to the Internet Gateway
# Associate the public route table with both public subnets

#NAT Gateways:
# Allocate an Elastic IP for NAT Gateway in AZ1
# Allocate an Elastic IP for NAT Gateway in AZ2
# Create a NAT Gateway in public subnet of AZ1 and associate Elastic IP
# Create a NAT Gateway in public subnet of AZ2 and associate Elastic IP

#Route Tables for Private Subnets:
# Create a route table for private subnet in AZ1
# Create a default route in the private route table pointing to the NAT Gateway in AZ1
# Associate the private route table with the private subnet in AZ1
# Create a route table for private subnet in AZ2
# Create a default route in the private route table pointing to the NAT Gateway in AZ2
# Associate the private route table with the private subnet in AZ2

#Security Groups:
# Create a security group for the Application Load Balancer (ALB) allowing HTTP and HTTPS from the internet
# Create a security group for EC2 instances allowing access from the ALB security group
# Create an Application Load Balancer across both public subnets
# Create a Target Group for the ALB that routes to EC2 instances
# Create an ALB Listener on port 80 forwarding requests to the Target Group
# (Optional) Create an ALB Listener on port 443 with HTTPS forwarding to the Target Group
# Create a Launch Template (or Launch Configuration) for EC2 instances
# Create an Auto Scaling Group using the Launch Template in private subnets
# Attach the Target Group to the Auto Scaling Group so EC2 instances register automatically

#Steps:
# 1) Go to AWS Management Console 
# 2) Navigate to CloudFormation
# 3) Click on "Create Stack" and choose "With new resources (standard)"
# 4) Choose "Upload a template file" or "Specify an Amazon S3 template URL" or Sync to GitHub
# 5) Upload your YAML file and click next 
# 6) Enter the stack name and parameters
# 7) Review the settings and click "Create stack"
# 8) Wait for the stack creation to complete
# 9) Once the stack is created, you can check the resources created in the CloudFormation console
# 10) You can check the EC2 instances created in the EC2 console

AWSTemplateFormatVersion: "2010-09-09"
Description: |
  Create a VPC with 2 Availability Zones, an Application Load Balancer, and an Auto Scaling Group with EC2 instances.
  This template includes all necessary resources and configurations to deploy a highly available and scalable web application.

Parameters:
  VpcCidr:
    Type: String
    Default: "10.0.0.0/16"
    Description: "The CIDR block for the VPC."
  PublicSubnet1Cidr:
    Type: String
    Default: "10.0.1.0/24"
    Description: "The CIDR block for the public subnet in Availability Zone 1."
  PublicSubnet2Cidr:
    Type: String
    Default: "10.0.2.0/24"
    Description: "The CIDR block for the public subnet in Availability Zone 2."
  PrivateSubnet1Cidr:
    Type: String
    Default: "10.0.3.0/24"
    Description: "The CIDR block for the private subnet in Availability Zone 1."
  PrivateSubnet2Cidr:
    Type: String
    Default: "10.0.4.0/24"
    Description: "The CIDR block for the private subnet in Availability Zone 2."
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: "The EC2 Key Pair to allow SSH access to the instances"
  ImageId:
    Type: String
    Description: "The AMI ID for the EC2 instances"

Resources:
  # VPC Creation
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: "MyVPC"

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: "MyInternetGateway"

  # Attach Internet Gateway to VPC
  VpcGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnets
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet1Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: "PublicSubnet1"

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PublicSubnet2Cidr
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: "PublicSubnet2"

  # Private Subnets
  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet1Cidr
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [0, !GetAZs ""]
      Tags:
        - Key: Name
          Value: "PrivateSubnet1"

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref PrivateSubnet2Cidr
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [1, !GetAZs ""]
      Tags:
        - Key: Name
          Value: "PrivateSubnet2"

  # Elastic IPs for NAT Gateways
  NatEIP1:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: "NatEIP1"

  NatEIP2:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: "NatEIP2"

  # NAT Gateways
  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP1.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: "NatGateway1"

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP2.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: "NatGateway2"

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "PublicRouteTable"

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "PrivateRouteTable1"

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: "PrivateRouteTable2"

  # Public Route to Internet Gateway
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VpcGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  # Private Routes to NAT Gateways
  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  # Route Table Associations
  PublicRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateRouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  # Security Group for Application Load Balancer
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow HTTP and HTTPS traffic to the ALB"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: "ALBSecurityGroup"

  # Security Group for EC2 Instances
  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Allow HTTP access from ALB and SSH access"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourceSecurityGroupId: !Ref ALBSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 10.0.0.0/16
      Tags:
        - Key: Name
          Value: "InstanceSecurityGroup"

  # Application Load Balancer
  ApplicationLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: "MyApplicationLoadBalancer"
      Type: application
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      IpAddressType: ipv4
      Tags:
        - Key: Name
          Value: "MyApplicationLoadBalancer"

  # Target Group
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Name: "MyTargetGroup"
      Port: 80
      Protocol: HTTP
      VpcId: !Ref VPC
      HealthCheckProtocol: HTTP
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      TargetType: instance
      Tags:
        - Key: Name
          Value: "MyTargetGroup"

  # ALB HTTP Listener
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref ApplicationLoadBalancer
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup

  # Launch Template
  LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: "MyLaunchTemplate"
      VersionDescription: "Initial version"
      LaunchTemplateData:
        ImageId: !Ref ImageId
        InstanceType: t2.micro
        KeyName: !Ref KeyName
        SecurityGroupIds:
          - !Ref InstanceSecurityGroup
        UserData:
          Fn::Base64: !Sub |
            #!/bin/bash
            yum update -y
            yum install -y httpd
            systemctl start httpd
            systemctl enable httpd
            echo "<h1>Hello World from $(hostname -f)</h1>" > /var/www/html/index.html
        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: "WebServer"

  # Auto Scaling Group
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: "MyAutoScalingGroup"
      VPCZoneIdentifier:
        - !Ref PrivateSubnet1
        - !Ref PrivateSubnet2
      LaunchTemplate:
        LaunchTemplateId: !Ref LaunchTemplate
        Version: !GetAtt LaunchTemplate.LatestVersionNumber
      MinSize: 1
      MaxSize: 5
      DesiredCapacity: 2
      TargetGroupARNs:
        - !Ref TargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 300
      Tags:
        - Key: Name
          Value: "MyAutoScalingGroup-Instance"
          PropagateAtLaunch: true

Outputs:
  VPCId:
    Description: "VPC ID"
    Value: !Ref VPC
    Export:
      Name: !Sub "${AWS::StackName}-VPC-ID"

  LoadBalancerDNS:
    Description: "Application Load Balancer DNS Name"
    Value: !GetAtt ApplicationLoadBalancer.DNSName
    Export:
      Name: !Sub "${AWS::StackName}-ALB-DNS"

  LoadBalancerURL:
    Description: "Application Load Balancer URL"
    Value: !Sub "http://${ApplicationLoadBalancer.DNSName}"